// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package worker

import (
	"context"
	"foxminded/3.3-weather-forecast-bot/internal/config"

	mock "github.com/stretchr/testify/mock"
)

// NewMockServiceI creates a new instance of MockServiceI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockServiceI(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockServiceI {
	mock := &MockServiceI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockServiceI is an autogenerated mock type for the ServiceI type
type MockServiceI struct {
	mock.Mock
}

type MockServiceI_Expecter struct {
	mock *mock.Mock
}

func (_m *MockServiceI) EXPECT() *MockServiceI_Expecter {
	return &MockServiceI_Expecter{mock: &_m.Mock}
}

// Run provides a mock function for the type MockServiceI
func (_mock *MockServiceI) Run(ctx context.Context, cfg config.Config) {
	_mock.Called(ctx, cfg)
	return
}

// MockServiceI_Run_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Run'
type MockServiceI_Run_Call struct {
	*mock.Call
}

// Run is a helper method to define mock.On call
//   - ctx
//   - cfg
func (_e *MockServiceI_Expecter) Run(ctx interface{}, cfg interface{}) *MockServiceI_Run_Call {
	return &MockServiceI_Run_Call{Call: _e.mock.On("Run", ctx, cfg)}
}

func (_c *MockServiceI_Run_Call) Run(run func(ctx context.Context, cfg config.Config)) *MockServiceI_Run_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(config.Config))
	})
	return _c
}

func (_c *MockServiceI_Run_Call) Return() *MockServiceI_Run_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockServiceI_Run_Call) RunAndReturn(run func(ctx context.Context, cfg config.Config)) *MockServiceI_Run_Call {
	_c.Run(run)
	return _c
}
